<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Perform a rolling deploy for a given fleet TEMPLATE unit. i.e.: destroy, submit, start.&#xd;
&#xd;
Only works for units that have already been started in the cluster.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>FLEET_UNIT</name>
          <description>Name of the fleet unit as it appears in ${HOST_SCRIPT_DIR}.
Does NOT require the &quot;.service&quot; extension.</description>
          <defaultValue>capcom</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>FLEET_DIR</name>
          <description>Director where template unit file is located.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>fleet-local/proxy</string>
              <string>fleet-local/control</string>
              <string>fleet-local/worker</string>
              <string>fleet-manual</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SLEEP</name>
          <description>Sleep a certain amount of time before each unit restart.</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
if [ -z $FLEET_UNIT ] || [ $FLEET_UNIT = &quot;&quot; ]; then
	echo &apos;FLEET_UNIT not provided.&apos;
    exit 1
fi
eval ${SETUPKEYS}

# update scripts before submitting again
bash $JENKINS_HOME/scripts/submit-update-scripts.sh

# ensure that unit file exists
echo &quot;---- verifying unit file&quot;
eval &quot;${SSHCMD} &apos;cat ${HOST_SCRIPT_DIR}/${FLEET_DIR}/${FLEET_UNIT}\\@.service&apos;&quot;
if [ ! $? -eq 0 ]; then exit 1; fi

# destroy old template
echo &quot;---- destroying old ${FLEET_UNIT}@.service ----&quot;
(eval &quot;${SSHCMD} &apos;fleetctl list-unit-files|grep ${FLEET_UNIT}@.service&apos;&quot; 2&amp;&gt;/dev/null) || :
eval &quot;${SSHCMD} &apos;fleetctl destroy ${FLEET_UNIT}@.service&apos;&quot;

# submit newly updated template
echo &quot;---- submitting new ${HOST_SCRIPT_DIR}/fleet-manual/${FLEET_UNIT}@.service ----&quot;
eval &quot;${SSHCMD} &apos;fleetctl submit ${HOST_SCRIPT_DIR}/${FLEET_DIR}/${FLEET_UNIT}\\@.service&apos;&quot;

# restart templated units one at a time
for unit in $(eval &quot;${SSHCMD} &apos;fleetctl list-units|grep ${FLEET_UNIT}@|tr -s [:space:]|cut -f1 -s&apos;&quot;); do
    echo &quot;---- redeploying ${unit} ----&quot;
	echo &quot;Destroying ${unit}&quot;
    eval &quot;${SSHCMD} &apos;fleetctl destroy ${unit}&apos;&quot;
    while [ &quot;$(eval &quot;${SSHCMD} &apos;fleetctl list-units|grep ${unit}&apos;&quot;)&quot; != &quot;&quot; ]; do sleep 1; done

    echo &quot;Restarting ${unit}&quot;
    eval &quot;${SSHCMD} &apos;fleetctl start ${unit}&apos;&quot;
    UNIT_STATUS=$(eval &quot;${SSHCMD} &apos;fleetctl list-units|grep ${unit}|tr -s [:space:]|cut -s -f3&apos;&quot;)
    while [ &quot;$UNIT_STATUS&quot; != &quot;active&quot; ]
    do
        if [ &quot;$UNIT_STATUS&quot; == &quot;failed&quot; ]; then
            exit 1
        fi
        sleep 1
    done

    echo &quot;waiting $SLEEP seconds before continuing...&quot;
    sleep ${SLEEP}
done</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>